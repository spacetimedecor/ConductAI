<p>The <code>manimlib/utils/iterables.py</code> file provides a collection of utility functions designed to facilitate the manipulation and processing of iterables and lists within the Manim library. These functions support common operations such as updating lists, generating adjacent pairs, batching items based on properties, resizing arrays, and creating Cartesian products, among others. The goal is to streamline iterable handling, improve code readability, and ensure efficient data processing throughout the library.</p>
<ul>
  <li><strong>listify</strong>: Converts an object into a list. If the object is already iterable (excluding strings), it returns a list of its elements; otherwise, it wraps the object in a list.</li>
  <li><strong>remove_list_redundancies</strong>: (Assumed) Removes duplicate entries from a list while preserving order, to avoid redundant elements.</li>
  <li><strong>list_update</strong>: Updates a list with elements from another iterable, similar to list extension.</li>
  <li><strong>list_difference_update</strong>: Removes elements from a list that are present in another iterable, modifying the original list.</li>
  <li><strong>adjacent_n_tuples</strong>: Generates tuples of adjacent items from an iterable, with a specified window size.</li>
  <li><strong>adjacent_pairs</strong>: Creates pairs of consecutive elements from an iterable, useful for pairwise comparisons.</li>
  <li><strong>batch_by_property</strong>: Groups items in a list into batches based on a specified property or key function.</li>
  <li><strong>shuffled</strong>: Returns a shuffled version of a list, randomizing the order of elements.</li>
  <li><strong>resize_array</strong>: Resizes an array to a new shape, possibly with interpolation or other resizing strategies.</li>
  <li><strong>resize_preserving_order</strong>: Resizes an array while maintaining the original order of elements.</li>
  <li><strong>resize_with_interpolation</strong>: Resizes an array using interpolation techniques to preserve data fidelity.</li>
  <li><strong>make_even</strong>: Adjusts a number or size to be even, often used for layout or array dimensions.</li>
  <li><strong>arrays_match</strong>: Checks whether two arrays have matching shapes or content.</li>
  <li><strong>array_is_constant</strong>: Determines if all elements in an array are the same, indicating a constant array.</li>
  <li><strong>cartesian_product</strong>: Computes the Cartesian product of multiple iterables, generating all possible combinations.</li>
  <li><strong>hash_obj</strong>: Generates a hash for an object, useful for caching or comparison purposes.</li>
</ul>